using NPC.Runtime;
using Neo.SmartContract.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

/// <summary>
/// #NAMESPACE#.#CLASSNAME# - Level 3 Deletable
///
/// Processed:      #NOWDATETIME# by #PROGRAMNAME# v#PROGRAMVERSION#
/// NPC Project:    https://github.com/mwherman2000/neo-npcc/blob/master/README.md
/// NPC Lead:       Michael Herman (Toronto) (mwherman@parallelspace.net)
/// </summary>

namespace #NAMESPACE#
{
    public partial class #CLASSNAME# : NeoTrace /* Level 3 Deletable */
    {
        // Deletable methods
        public static bool IsBuried(#CLASSNAME# e)
        {
            return (e._state == NeoEntityModel.EntityState.TOMBSTONED);
        }

        public static #CLASSNAME# Tombstone()
        {
            #CLASSNAME# e = new #CLASSNAME#();
            #ALLFIELDSASSIGNEDZERO#
            e._state = NeoEntityModel.EntityState.TOMBSTONED;
            LogExt("Tombstone().#CLASSNAME#", e);
            return e;
        }

        public static #CLASSNAME# Bury(byte[] key)
        {
            if (key.Length == 0) return Null();

            Neo.SmartContract.Framework.Services.Neo.StorageContext ctx = Neo.SmartContract.Framework.Services.Neo.Storage.CurrentContext;
            byte[] _bkeyTag = Helper.Concat(key, _bclassKeyTag);

            #CLASSNAME# e;
            byte[] bsta = Neo.SmartContract.Framework.Services.Neo.Storage.Get(ctx, Helper.Concat(_bkeyTag, _bSTA));
            NeoTrace.Trace("Bury(bkey).bsta", bsta.Length, bsta);
            if (bsta.Length == 0)
            {
                e = #CLASSNAME#.Missing();
            }
            else // not MISSING - bury it
            {
                e = #CLASSNAME#.Tombstone(); // but don't overwrite existing field values - just tombstone it
                Neo.SmartContract.Framework.Services.Neo.Storage.Put(ctx, Helper.Concat(_bkeyTag, _bSTA), e._state.AsBigInteger());
